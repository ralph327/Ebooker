* Write a frontend "client" that serves like the current script does.

* Implement API!
** Bots/Scheduling

* Proper server logging to files, etc.?
* Deloy to a linode.

* Another frontend is the webapp.

API
===

GenerateTweets(genParams) : []string
GenerateWithAuthorization(genParams, authParams) : []string

CreateNewBot(name, authParams, genparams, schedule) : "Next time is..."
ListBots() : []string
SetBotSchedule(name, schedule) : "Next time is..."
ListBotSchedule(name) : "Next time is..."
CancelBot(name) : "<name> cancelled."
DeleteBot(name) : "<name> gone!"

ProvideCredentials(name, authparams) : "Name -> Token"

Ping() : "ok"


Critical
--------

* TESTS
** Integration test for the actual command-line client: test flags, etc.
** Mocks for server-calling code, DB?
* REFACTORING
** check godoc output, see if module visibility is alright.
** clean documentation comments, debugging output.
** "Effective Go" -- look to naming, visibility
** package comments!
* PROFILING
** needless call-by-value causing copying? Where are we slow?

* FEATURE QUALITY
* Length of tweets is bad, often goes over.
* Ensure no direct subsets?
* HTML encoding needs to be undone, e.g. "&gt;" -> ">"


Features
--------
* Persistent storage of Generators? Custom binary format?
----
* "Sweeps," a set of filters that you can apply to the text, 
** Capitalization.
*** ALLCAPS
*** all lowercase, better known as the "instagram user"
*** Washington Post Style, Where Every Word is Capitalized
*** Force a proper sentence structure.

** Hashtags
*** coffee dadder#
*** Random #Hashtagging of a word.
*** Chuck Grassleying #CombineWordsIntoOneTag (note that you'd probably want to 
     remove a word from whatever you contract together to make it as 
     weird-as-hell as possible).
----
* "Real" Database backend, like Postgres?
