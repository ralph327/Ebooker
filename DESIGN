* Bots/Scheduling.
* Bot persistence.
* Monitoring/logging/admin of bots.
* Proper server logging to files, etc.?


API
===

GenerateTweets(genParams) : []string
GenerateWithAuthorization(genParams, authParams) : []string
CreateNewBot(name, authParams, genparams, schedule) : "Next time is..."
ListBots() : []string
CancelBot(name) : "<name> cancelled."
DeleteBot(name) : "<name> gone!"

ListBotSchedule(name) : "Next time is..."
SetBotSchedule(name, schedule) : "Next time is..."
StartBot(name) : "Next time is..."

ProvideCredentials(name, authparams) : "Name -> Token"

Ping() : "ok"


Critical
--------

* TESTS
** Integration test for the actual command-line client: test flags, etc.
** Mocks for server-calling code, DB?
* REFACTORING
** check godoc output, see if module visibility is alright.
** clean documentation comments, debugging output.
** "Effective Go" -- look to naming, visibility
** package comments!
* PROFILING
** needless call-by-value causing copying? Where are we slow?

* FEATURE QUALITY
** Ensure no direct subsets?


Features
--------
* Webapp frontend.
* Persistent storage of Generators/bots/tweets? Custom binary format?
----
* "Sweeps," a set of filters that you can apply to the text, 
** Capitalization.
*** ALLCAPS
*** all lowercase, better known as the "instagram user"
*** Washington Post Style, Where Every Word is Capitalized
*** Force a proper sentence structure.

** Hashtags
*** coffee dadder#
*** Random #Hashtagging of a word.
*** Chuck Grassleying #CombineWordsIntoOneTag (note that you'd probably want to 
     remove a word from whatever you contract together to make it as 
     weird-as-hell as possible).
----
* "Real" Database backend, like Postgres?

* RT/MT stripping?
